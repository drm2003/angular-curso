{"ast":null,"code":"import { environment } from '../environments/environment';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Email } from './models/email';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EmailService = /*#__PURE__*/(() => {\n  class EmailService {\n    constructor(http) {\n      this.http = http;\n      this.api = environment.baseUrl + '/emails';\n      this.cabecalho = new HttpHeaders({\n        'Authorization': localStorage.getItem('TOKEN')\n      });\n    }\n\n    enviar({\n      destinatario,\n      assunto,\n      conteudo\n    }) {\n      const emailApi = {\n        to: destinatario,\n        subject: assunto,\n        content: conteudo\n      };\n      return this.http.post(this.api, emailApi, {\n        headers: this.cabecalho\n      }).pipe(map(emailApi => {\n        return new Email({\n          destinatario: emailApi.to,\n          assunto: emailApi.subject,\n          conteudo: emailApi.content,\n          dataDeEnvio: emailApi.created_at,\n          id: emailApi.id\n        });\n      }));\n    }\n\n    listar() {\n      return this.http.get(this.api, {\n        headers: this.cabecalho\n      }).pipe(map(response => {\n        return response.map(emailApi => new Email({\n          destinatario: emailApi.to,\n          assunto: emailApi.subject,\n          conteudo: emailApi.content,\n          dataDeEnvio: emailApi.created_at,\n          id: emailApi.id\n        }));\n      }));\n    }\n\n    deletar(id) {\n      return this.http.delete(`${this.api}/${id}`, {\n        headers: this.cabecalho\n      });\n    }\n\n  }\n\n  EmailService.ɵfac = function EmailService_Factory(t) {\n    return new (t || EmailService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EmailService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmailService,\n    factory: EmailService.ɵfac,\n    providedIn: 'root'\n  });\n  return EmailService;\n})();","map":null,"metadata":{},"sourceType":"module"}